#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        pkt_0 : 32;
        pkt_1 : 32;
        pkt_2 : 32;
        pkt_3 : 32;
        pkt_4 : 32;
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10
{% for j in range(num_state_groups) %}
register reg_{{j}} {
    width : 64;
    instance_count : MAX_SIZE;
}
{% endfor %}

{% for i in range(num_pipeline_stages) %}
  {% for j in range(num_state_groups) %}
    {% if salu_configs[i][j] == 1 %}
// Stateful ALU blackbox
blackbox stateful_alu {{sketch_name}}_stateful_alu_{{i}}_{{j}}_blackbox {
    {% set alu = stateful_alus[i][j] %}
    reg                       : reg_{{j}};
    condition_lo              : {{alu.condition_lo_expr }};
    condition_hi              : {{alu.condition_hi_expr }};
    update_lo_1_predicate     : {{alu.update_lo_1_predicate_expr }};
    update_lo_1_value         : {{alu.update_lo_1_value_expr }};
    update_lo_2_predicate     : {{alu.update_lo_2_predicate_expr }};
    update_lo_2_value         : {{alu.update_lo_2_value_expr}};
    update_hi_1_predicate     : {{alu.update_hi_1_predicate_expr}};
    update_hi_1_value         : {{alu.update_hi_1_value_expr}};
    update_hi_2_predicate     : {{alu.update_hi_2_predicate_expr}};
    update_hi_2_value         : {{alu.update_hi_2_value_expr}};
    {# TODO: Check back whether the output_predicate should always be 1. #}
    output_predicate          : 1
    output_value              : {{alu.output_value_expr }};
    {# TODO: Once we fix the issue with push vs pull mode. We should be able to
    generate the expression for output_dst. #}
    {# output_dst                : {{alu.output_dst_expr }};
    NOTE(taegyunk): These values might not matter for us now, but we should
    revisit this later.
    initial_register_lo_value : {{alu.initial_register_lo_value_expr}};
    initial_register_hi_value : {{alu.initial_register_hi_value_expr}}; #}

    {# Instructions omitted for now
    selector_binding
    math_unit_input
    math_unit_output_scale
    math_unit_exponent_shift
    math_unit_exponent_invert
    math_unit_lookup_table
    reduction_or_group
    stateful_logging_mode #}
}

// Stateful ALU Action
action {{sketch_name}}_stateful_alu_{{i}}_{{j}}_action () {
    {{sketch_name}}_stateful_alu_{{i}}_{{j}}_blackbox.execute_stateful_alu(0);
    // TODO: Replace 0 with appropriate value for array-based registers. The
    // appropriate value can be determined by parsing the .c file using the
    // Domino compiler.
}

// Stateful ALU table
// (use pragmas to enforce table placement in certain stages)
@pragma stage {{i}}
table {{sketch_name}}_stateful_alu_{{i}}_{{j}}_table () {
    actions {
        {{sketch_name}}_stateful_alu_{{i}}_{{j}}_action;
    }
    default_action: {{sketch_name}}_stateful_alu_{{i}}_{{j}}_action;
}
{% endif %}
  {% endfor %}
{% endfor %}

{% for i in range(num_pipeline_stages) %}
  {% for j in range(num_alus_per_stage) %}
// Stateless ALU action
{% set opcode = stateless_alus[i][j] %}
action {{sketch_name}}_stateless_alu_{{i}}_{{j}}_action () {
    {# NOTE: Please use the same opcode for the ones in
    stateless_alu_for_tofino.alu
    TODO: here the mdata.result1 should refer to a field in the header.
    #}
    {% if opcode == 0 %}
    modify_field(mdata.result1, mdata.valu1);
    {% elif opcode == 1 %}
    add(mdata.result1, mdata.pkt_0, mdata.pkt_1);
    {% elif opcode == 2 %}
    subtract(mdata.result1, mdata.pkt_0, mdata.pkt_1);
    {% elif opcode == 3 %}
    bit_and(mdata.result1, mdata.pkt_0, mdata.pkt_1);
    {% elif opcode == 4 %}
    bit_andca(mdata.result1, mdata.pkt_0, mdata.pkt_1);
    {% elif opcode == 5 %}
    bit_andcb(mdata.result1, mdata.pkt_0, mdata.pkt_1);
    {% elif opcode == 6 %}
    bit_nand(mdata.result1, mdata.pkt_0, mdata.pkt_1);
    {% elif opcode == 7 %}
    bit_nor(mdata.result1, mdata.pkt_0, mdata.pkt_1);
    {% elif opcode == 8 %}
    bit_not(mdata.result1, mdata.pkt_0);
    {% elif opcode == 9 %}
    bit_or(mdata.result1, mdata.pkt_0, mdata.pkt_1);
    {% elif opcode == 10 %}
    bit_orca(mdata.result1, mdata.pkt_0, mdata.pkt_1);
    {% elif opcode == 11 %}
    bit_orcb(mdata.result1, mdata.pkt_0, mdata.pkt_1);
    {% elif opcode == 12 %}
    max(mdata.result1, mdata.pkt_0, mdata.pkt_1);
    {% else %}
    min(mdata.result1, mdata.pkt_0, mdata.pkt_1);
    {% endif %}
}

// Stateless ALU table
@pragma stage {{i}}
table {{sketch_name}}_stateless_alu_{{i}}_{{j}}_table {
    actions {
        {{sketch_name}}_stateless_alu_{{i}}_{{j}}_action;
    }
    default_action:  {{sketch_name}}_stateless_alu_{{i}}_{{j}}_action;
}
  {% endfor %}
{% endfor %}

// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    {% for i in range(num_pipeline_stages) %}
      {% for j in range(num_alus_per_stage) %}
        apply({{sketch_name}}_stateless_alu_{{i}}_{{j}});
      {% endfor %}
      {% for j in range(num_state_groups) %}
        {% if salu_configs[i][j] == 1 %}
        apply({{sketch_name}}_stateful_alu_{{i}}_{{j}});
        {% endif %}
      {% endfor %}
    {% endfor %}
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
