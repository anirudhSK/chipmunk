#include <tofino/intrinsic_metadata.p4>
#include "tofino/stateful_alu_blackbox.p4"

/* Declare Header */
header_type ethernet_t {
    fields {
        dstAddr : 48;
        srcAddr : 48;
        etherType : 16;
    }
}

header ethernet_t ethernet;

header_type ipv4_t {
    fields {
        // TODO: Have a hard limit on 5 fields for now. Ensure this in the tofino code generator.
        field1 : 32;
        field2 : 32;
        field3 : 32; 
        field4 : 32;
        field5 : 32;
    }
}

header ipv4_t ipv4;

/* Declare Parser */
parser start {
	return select(current(96,16)){
		0x0800: parse_ethernet;
	}
}

parser parse_ethernet {
    extract(ethernet);
    return select(latest.etherType) {
        /** Fill Whatever ***/
        0x0800     : parse_ipv4;
        default: ingress;
    }
}
parser parse_ipv4 {
    extract(ipv4);
    return ingress;
}

// TODO: Derive MAX_SIZE from Domino program.
#define MAX_SIZE 10
register {{reg_name}} {
    width : 64;
    instance_count : MAX_SIZE;
}

{% for i in range(num_pipeline_stages) %}
  {% for j in range(num_state_groups) %}
    // Stateful ALU blackbox
    blackbox stateful_alu stateful_alu_{{i}}_{{j}}_blackbox {
      reg : {{reg_name}};
      condition_lo : {{ condition_lo_expr }};
      condition_hi : {{ condition_hi_expr }};
      update_lo_1_predicate : {{ update_lo_1_predicate_expr }};
      update_lo_1_value : {{ update_lo_1_value_expr }};
      update_lo_2_predicate : {{ update_lo_2_predicate_expr }};
      update_lo_2_value : {{update_lo_2_value_expr}};
      update_hi_1_predicate : {{update_hi_1_predicate_expr}};
      update_hi_1_value : {{update_hi_1_value_expr}};
      update_hi_2_predicate : {{update_hi_2_predicate_expr}};
      update_hi_2_value : {{update_hi_2_value_expr}};
      output_predicate : {{output_predicate_expr}};
      output_value : {{ output_value_expr }};
      output_dst : {{ output_dst_expr }};
      initial_register_lo_value : {{initial_register_lo_value_expr}};
      initial_register_hi_value : {{initial_register_hi_value_expr}};
    }

    // Stateful ALU Action
    action stateful_alu_{{i}}_{{j}}_action () {
        stateful_alu_{{i}}_{{j}}_blackbox.execute_stateful_alu(0);
        // TODO: Replace 0 with appropriate value for array-based registers.
    }

    // Stateful ALU table
    // (use pragmas to enforce table placement in certain stages)
    @pragma stage {{i}}
    table stateful_alu_{{i}}_{{j}}_table () {
        actions {
            stateful_alu_{{i}}_{{j}}_action;
        }
        default_action: stateful_alu_{{i}}_{{j}}_action;
    }
  {% endfor %}
{% endfor %}

{% for i in range(num_pipeline_stages) %}
  {% for j in range(num_alus_per_stage) %}
    // Stateless ALU action
    action stateless_alu_{{i}}_{{j}}_action () {
       {{stateless_alu_expr}};
    }

    // Stateless ALU table
    @pragma stage {{i}}
    table stateless_alu_{{i}}_{{j}}_table {
        actions {
            stateless_alu_{{i}}_{{j}}_action;
        }
        default_action:  stateless_alu_{{i}}_{{j}}_action;
    }
  {% endfor %}
{% endfor %}

// Required: mac_forward table for forwarding to switch CPU.
action set_egr(egress_spec) {
    modify_field(ig_intr_md_for_tm.ucast_egress_port, egress_spec);
}
table mac_forward {
    reads {
        ethernet.dstAddr : exact;
    }
    actions {
        set_egr;
    }
    size:1;
}

control ingress {
    // Call all the required ALUs.
    {% for i in range(num_pipeline_stages) %}
      {% for j in range(num_alus_per_stage) %}
        apply(stateless_alu_{{i}}_{{j}});
      {% endfor %}
      {% for j in range(num_state_groups) %}
        apply(stateful_alu_{{i}}_{{j}});
      {% endfor %}
    {% endfor %}
    // MAC Forwarding by default
    apply(mac_forward);
}

control egress {

}
