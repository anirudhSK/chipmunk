type : stateful
state variables : {state_0, state_1} // register_lo, register_hi
hole variables : {}
packet fields : {pkt_0, pkt_1} // metadata_lo, metadata_hi

// compute_alu(A, B), where A can be metadata or constant
// where B can be register or constant

// Model computation ALUs from Tofino salu.pdf
int alu_hi_1 = compute_alu(Mux3(pkt_0, pkt_1, C()), Mux3(state_0, state_1, C()));
int alu_hi_2 = compute_alu(Mux3(pkt_0, pkt_1, C()), Mux3(state_0, state_1, C()));
int alu_lo_1 = compute_alu(Mux3(pkt_0, pkt_1, C()), Mux3(state_0, state_1, C()));
int alu_lo_2 = compute_alu(Mux3(pkt_0, pkt_1, C()), Mux3(state_0, state_1, C()));

// Comparison unit
// NOTE: rel_op doesn't support >-, <= but it should be enough because
// boolean_op (used to compute the ALU predicates) has support for ~.
bit cmp_hi =  rel_op(arith_op(0, Mux3(pkt_0, pkt_1, 0)) +
                     arith_op(0, Mux3(state_0, state_1, 0)) + C(),
                     0);
bit cmp_lo =  rel_op(arith_op(0, Mux3(pkt_0, pkt_1, 0)) +
                     arith_op(0, Mux3(state_0, state_1, 0)) + C(),
                     0);

// ALU predicates
bit update_hi_1_predicate = boolean_op(cmp_hi, cmp_lo);
bit update_hi_2_predicate = boolean_op(cmp_hi, cmp_lo);
bit update_lo_1_predicate = boolean_op(cmp_hi, cmp_lo);
bit update_lo_2_predicate = boolean_op(cmp_hi, cmp_lo);

// Actually run the ALUs
if (update_hi_1_predicate && update_hi_2_predicate) {
  // TODO: Implement necessary code to compute bitwise OR using bit vectors.
  // Following line needs to be written as state_1 = alu_hi_1 | alu_hi_2.
  // The bitwise OR of the two alu values. Sketch only supports bitwisse OR for
  // bit vectors not for ints. So we now leave this as assert(false) to catch
  // that certain benchmarks don't pass because of this.
    assert(false);
} elif (update_hi_1_predicate && !update_hi_2_predicate) {
    state_1 = alu_hi_1;
} elif (!update_hi_1_predicate && update_hi_2_predicate) {
    state_1 = alu_hi_2;
} else {
    state_1 = state_1;
}

if (update_lo_1_predicate && update_lo_2_predicate) {
  // TODO: Same as above.
    assert(false);
} elif (update_lo_1_predicate && !update_lo_2_predicate) {
    state_0 = alu_lo_1;
} elif (!update_lo_1_predicate && update_lo_2_predicate) {
    state_0 = alu_lo_2;
} else {
    state_0 = state_0;
}

// TODO: We can only update one metadata field, and we don't know at this point
// which one will get updated. We would return simply one value from here and
// let the output mux choose. To handle this, we would like to change all
// stateful alus to return one single integer value and modify related Python
// sketch generator scripts to accomodate this.
return Mux5(pkt_1, pkt_0, state_0, state_1, 0);
